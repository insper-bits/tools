#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Rafael Corsi @ insper.edu.br
# Dez/2017
# Disciplina Elementos de Sistemas
#
# Convert program memmory to altera mif file
# that can be used to load FPGA and to Simulate (modelsim)
# http://quartushelp.altera.com/13.0/mergedProjects/reference/glossary/def_mif.htm
#
# LOG:
# - 11/4/2018
#    O tamanho do mif (DEPTH) estava fixo em 30
#    alterei para ser atribuido com o real tamanho
#    da memória a ser atualizada, isso e importante
#    pois usamos esse arquivo para atuailizar a ROM da FPGA

import os
import argparse
import subprocess
import time

TAB = "    "
END = "\n"


def toMIF(mem, mif):
    cnt = 0
    try:
        fw = open(mif, "w")
        fr = open(mem, "r")

        # verifica quantas instrucoes possui
        # 11/4/18
        num_lines = sum(1 for line in open(mem))

        fw.write("-- Elementos de Sistema - INSPER.edu.br" + END)
        fw.write("-- Rafael Corsi" + END)
        fw.write("-- File generated by toMIF.py" + END)
        fw.write("-- originated from" + mem + "" + END)
        fw.write("-- to be used on ALTERA FPGAs" + END + END)

        fw.write("WIDTH=18;" + END)
        fw.write("DEPTH={};".format(num_lines) + END)
        fw.write("" + END)
        fw.write("ADDRESS_RADIX=UNS;" + END)
        fw.write("DATA_RADIX=BIN;" + END)
        fw.write("" + END)
        fw.write("CONTENT BEGIN" + END)

        for line in fr:
            fw.write(TAB + "{:4d}".format(cnt) + " : " + line.rstrip() + ";" + "" + END)
            cnt = cnt + 1
        # colocar for aqui
        fw.write("END;" + END)

        fw.close()
        fr.close()

    except IOError:
        print("Arquivo não encontrado")


def writeSOF(cdf):

    # reinicia o driver do jtagd
    # para garantir que o mesmo está
    # funcionando
    os.system("killall jtagd")
    time.sleep(1)
    os.system("jtagconfig")
    time.sleep(1)

    # verifica se o .mif existe
    cdf = os.path.abspath(cdf)

    if not os.path.isfile(cdf):
        print("Arquivo {} não encontrado".format(cdf))
        return 1

    pPGM = subprocess.Popen("quartus_pgm -c 1 -m jtag " + cdf, shell=True)
    exit_codes = pPGM.wait()
